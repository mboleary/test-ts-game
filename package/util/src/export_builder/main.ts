import { access, readdir, glob, open } from 'node:fs/promises';
import { Dir } from 'node:fs';

const MAGIC_COMMENT = '@dev-util:export_builder';
const INDEX_FILE_NAME = 'index.ts';

export type MagicCommentConfig = {
  preventOverwrite?: boolean;
  autoGenerated?: boolean;

}

export async function buildExports(startDir: string, excludeDirs = [], includeFiles = ['*.js, *.ts']) {
  return await buildExportsInDir(startDir, startDir, excludeDirs, includeFiles);
}

async function buildExportsInDir(dir: string, startDir: string, excludeDirs: string[], includeFiles: string[]) {
  const dirContents = glob(includeFiles, {
    cwd: dir,
    withFileTypes: true,
    exclude(name) {
      // Exclude specified dirs and index.ts file
      return excludeDirs.indexOf(`${dir}/${name}`) >= 0 || name === INDEX_FILE_NAME;
    }
  });
  const files = [];

  for await (const dirEnt of dirContents) {
    if (dirEnt.isDirectory()) {
      await buildExportsInDir(`${startDir}/${dirEnt.name}`, startDir, excludeDirs, includeFiles);
      files.push(dirEnt.name);
    } else {
      // remove file extension for exports
      const name = dirEnt.name;
      files.push(name.substring(0, name.lastIndexOf('.')));
    }

  }

  if (files.length) {
    // Check for existing index.ts
    const existingIndex = glob(INDEX_FILE_NAME, {
      cwd: dir,
      withFileTypes: true
    });

    if (await existingIndex.value?.isFile()) {
      // check for magic comment
      const fname = `${dir}/${existingIndex[0].name}`;
      const indexFileHandle = await open(fname, 'r');
      const lines = await indexFileHandle.readLines();

      let json: MagicCommentConfig | null = null;

      // Find magic comment with json config
      for (const line of lines) {
        if (line.match(`/${MAGIC_COMMENT}`)) {
          const jsonStr = line.substring(line.indexOf('{')).trim();
          json = JSON.parse(jsonStr);
          break;
        }
      }

      await indexFileHandle.close();

      if (json && json.preventOverwrite) {
        console.log(`Skipping ${dir} due to preventOverwrite being set in magic comment`);
        return;
      }
    }

    // Generate index file
    const fname = `${dir}/${INDEX_FILE_NAME}`;
    const indexFileHandle = await open(fname, 'w');

    const json: MagicCommentConfig = {
      preventOverwrite: false,
      autoGenerated: true
    };

    await indexFileHandle.write(`// ${MAGIC_COMMENT} ${JSON.stringify(json)}`);

    files.sort((a,b) => a.localeCompare(b));

    for (const file of files) {
      await indexFileHandle.write(`export * from '${file}';`);
    }

    await indexFileHandle.close();
  }
}
